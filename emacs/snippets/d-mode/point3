# -*- mode: snippet -*-
# name: procon.point3
# key: point3
# group: procon
# --
struct Point3(T)
{
  T x, y, z;
  pure auto opBinary(string op: "+")(Point3!T rhs) const { return Point3!T(x + rhs.x, y + rhs.y, z + rhs.z); }
  pure auto opBinary(string op: "-")(Point3!T rhs) const { return Point3!T(x - rhs.x, y - rhs.y, z - rhs.z); }
  pure auto opBinary(string op: "*")(Point3!T rhs) const { return x * rhs.x + y * rhs.y + z * rhs.z; }
  pure auto opBinary(string op: "*")(T a) const { return Point3!T(x * a, y * a, z * a); }
  pure auto opBinary(string op: "/")(T a) const { return Point3!T(x / a, y / a, z / a); }
  pure auto hypot2() const { return x ^^ 2 + y ^^ 2 + z ^^ 2; }
}

pure auto outerProd(T)(Point3!T p1, Point3!T p2)
{
  return Point3!T(p1.y * p2.z - p1.z * p2.y, p1.z * p2.x - p1.x * p2.z, p1.x * p2.y - p1.y * p2.x);
}
