#+OPTIONS: num:nil author:nil timestamp:nil

#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>

#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>

# Local variables:
# after-save-hook: org-html-export-to-html
# end:

** No.51

実装あるのみ。

制約から $D^2$ が =int= を超える可能性があるので =long= を使う。

** No.52

$k$ 回目に前から取るか後ろから取るかで全探索する。

** No.55

$P_1(X1, Y1), P_2(X2, Y2), P_3(X3, Y3)$ とする。

$P_1,P_2,P_3$ の順序を入れ替えて、すべての入れ替えパターンで正方形が1つでもできるかどうかを調べる。

$\vec{v_1}=\overrightarrow{P_1P_2}$, $\vec{v_2}=\overrightarrow{P_2P_3}$ とすると、正方形ができるためには次の条件が成り立つ必要がある。

\[ |\vec{v_1}| = |\vec{v_2}| \]

\[ \vec{v_1} \cdot \vec{v_2} = 0 \]

このとき、$P_1, P_4$ の位置ベクトルを $\vec{p_1}, \vec{p_4}$ とすると、

\[ \vec{p_4} = \vec{p_1} + \vec{v_2} \]

となる。

** No.56

\(D(100 + P) / 100\) で求められる。

$D (100 + P)$ が =int= を超える可能性があるので =long= を使う。

** No.57

1つのサイコロを振ったときの出る目の期待値は $3.5$ である。

各サイコロは独立なので、$N$ 個のサイコロを振った時に出る目の和の合計の期待値は各サイコロを振った時の目の和の期待値の合計 $3.5N$ となる。

** No.58

モンテカルロ法を使って実装あるのみ。

** No.59

Binary Indexed Tree (BIT) を使う。

インデックスには荷物の重さを使い、重さ $W$ の荷物を積む(降ろす)ときには BIT のインデックス $W$ を +1(-1) する。

** No.60

各位置ごとに合計でどれだけの攻撃があったかを imos 法で計算しておく。

その後、モンスターごとに HP が残るかどうかを調べ、残るならその合計を計算する。

** No.61

空間を下のように折り返して上下左右ともに2倍に拡張する。

|------------+--------------|
| 上下反転   | 上下左右反転 |
| オリジナル | 左右反転     |
|------------+--------------|

ただし、左右の端および上下の端はつながっているものとする。こうすることで反射を考えなくてもよくなる。

次に、$V_x,V_y$ を $g = \gcd(V_x, V_y)$ で割り、$D$ を $g$ 倍しておく。これで単位時間ごとに軌道上の格子点をすべて通るようになる。

あとはシミュレーションを行い、時間 $D$ 内にどの格子点を通るか調べればいい。ただし、すでに通った点にたどり着いた場合は以降も同じ軌道を通るのでシミュレーションを打ち切る。

** No.63

$L$ が2で割り切れない場合または $L/2$ が $K$ で割り切れない場合は、$\lfloor \lfloor L/2 \rfloor /K \rfloor$ 回かじる。

そうでない場合は1回少なくかじる。

** No.64

\begin{align*}
F_{k+3} &= F_{k+2} \oplus F_{k+1} \\
        &= (F_{k+1} \oplus F_{k}) \oplus F_{k+1} \\
        &= (F_{k+1} \oplus F_{k+1}) \oplus F_{k} \\
        &= F_{k}
\end{align*}

となるので、$F_k$ は周期3で循環している。

** No.65

問題に書かれている計算式にしたがって計算する。

** No.66

$i$ 番目の人が $j$ 回戦を勝ち抜く確率を $p(i, j)$ とし、$i$ 番目の人が $j$ 番目の人に勝つ確率を $q(i, j)$ とすると、

\[ q(i, j) = \frac{S_i^2}{S_i^2 + S_j^2} \]
\[ p(i, j) = p(i, j - 1) \sum_{T}^{k} q(i, k) \cdot p(k, j - 1) \]

となる。ただし、$T$ は $i$ 番目の人が $j$ 回戦で対戦する可能性のある相手の集合である。

これを1回戦から順に計算し、$p(0, M)$ を見る。

** No.67

長さ $L$ の棒が $K$ 本以上できるかどうかを調べる。

$L$ は二分探索で探す。

** No.69

文字をソートして比較する。

